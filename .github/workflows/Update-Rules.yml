name: Update Rules
on: 
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */4 * * *'  # 每4小时自动执行
  push:
    paths:
      - 'data/python/utils/**'
      - 'data/python/rules_generator/**'
      - 'data/source/**'
      - 'data/mod/**'
      - 'requirements.txt'

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Detect default branch
        id: branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Detected default branch: $DEFAULT_BRANCH"

      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/utils/**
            data/python/rules_generator/**
            data/source/**
            data/mod/**
            requirements.txt

      - name: Set up Python
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies with retry
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python -m pip install --upgrade pip
          for i in {1..3}; do
            pip install -r requirements.txt && break || { echo "Retry $i failed"; sleep 5; }
          done
          # 关键依赖检查
          pip list | grep -E 'requests|pytz|pathlib' || { echo "::error::Critical dependencies missing"; exit 1; }

      - name: Debug file structure
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Current directory: $(pwd)"
          ls -la data/python/utils/
          ls -la data/python/rules_generator/
          cat requirements.txt || echo "::warning::requirements.txt missing"

      # 数据准备阶段
      - name: Download Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          DL_SCRIPT="data/python/utils/dl.py"
          if [ ! -f "$DL_SCRIPT" ]; then
            echo "::error::$DL_SCRIPT not found"
            exit 1
          fi
          python "$DL_SCRIPT"
          # 验证临时文件生成
          if [ -z "$(ls -A tmp/)" ]; then
            echo "::error::No files downloaded to tmp directory"
            exit 1
          fi
          echo "Downloaded files count: $(ls -l tmp/ | wc -l)"

      - name: Merge Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          MERGE_SCRIPT="data/python/utils/merge.py"
          if [ ! -f "$MERGE_SCRIPT" ]; then
            echo "::error::$MERGE_SCRIPT not found"
            exit 1
          fi
          python "$MERGE_SCRIPT"
          # 验证合并结果
          for file in adblock.txt allow.txt; do
            if [ ! -f "$file" ]; then
              echo "::error::merge.py failed to generate $file"
              exit 1
            fi
            if [ $(wc -l < "$file") -lt 10 ]; then  # 基本内容校验
              echo "::error::$file has invalid content (too few lines)"
              exit 1
            fi
          done
          echo "adblock.txt lines: $(wc -l adblock.txt | awk '{print $1}')"
          echo "allow.txt lines: $(wc -l allow.txt | awk '{print $1}')"

      # 规则生成阶段
      - name: Generate DNS Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          DNS_SCRIPT="data/python/rules_generator/filter-dns.py"
          if [ ! -f "$DNS_SCRIPT" ]; then
            echo "::error::$DNS_SCRIPT not found"
            exit 1
          fi
          python "$DNS_SCRIPT"
          # 验证dns.txt生成
          if [ ! -f "dns.txt" ]; then
            echo "::error::filter-dns.py failed to generate dns.txt"
            exit 1
          fi
          if [ $(wc -l < "dns.txt") -lt 10 ]; then
            echo "::error::dns.txt has invalid content"
            exit 1
          fi
          echo "dns.txt lines: $(wc -l dns.txt | awk '{print $1}')"

      - name: Filter Ad Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          FILTER_AD_SCRIPT="data/python/utils/filter-ad.py"
          if [ ! -f "$FILTER_AD_SCRIPT" ]; then
            echo "::error::$FILTER_AD_SCRIPT not found"
            exit 1
          fi
          python "$FILTER_AD_SCRIPT"
          # 验证过滤结果
          if [ ! -f "adblock-filtered.txt" ]; then
            echo "::error::filter-ad.py failed to generate adblock-filtered.txt"
            exit 1
          fi
          if [ $(wc -l < "adblock-filtered.txt") -lt 10 ]; then
            echo "::error::adblock-filtered.txt has invalid content"
            exit 1
          fi

- name: Generate Domain List
  if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
  run: |
    DOMAIN_SCRIPT="data/python/rules_generator/domain_list.py"
    if [ ! -f "$DOMAIN_SCRIPT" ]; then
      echo "::error::$DOMAIN_SCRIPT not found"
      exit 1
    fi
    python "$DOMAIN_SCRIPT"
    # 新增校验：检查实际生成的 domain_list.txt
    if [ ! -f "domain_list.txt" ]; then
      echo "::error::domain_list.py failed to generate domain_list.txt"
      exit 1
    fi
    # 可选：校验文件内容有效性
    if [ $(wc -l < "domain_list.txt") -lt 10 ]; then
      echo "::error::domain_list.txt 内容异常（行数过少）"
      exit 1
    fi

      # 客户端规则生成
      - name: Generate Quantumult X Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          QX_SCRIPT="data/python/rules_generator/qx.py"
          if [ ! -f "$QX_SCRIPT" ]; then
            echo "::error::$QX_SCRIPT not found"
            exit 1
          fi
          python "$QX_SCRIPT"
          if [ ! -f "qx.list" ]; then
            echo "::error::qx.py failed to generate qx.list"
            exit 1
          fi

      - name: Generate Loon Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          LOON_SCRIPT="data/python/rules_generator/loon.py"
          if [ ! -f "$LOON_SCRIPT" ]; then
            echo "::error::$LOON_SCRIPT not found"
            exit 1
          fi
          python "$LOON_SCRIPT"
          if [ ! -f "loon-rules.list" ]; then
            echo "::error::loon.py failed to generate loon-rules.list"
            exit 1
          fi

      - name: Generate Mihomo Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          MIHOMO_SCRIPT="data/python/rules_generator/mihomo.py"
          if [ ! -f "$MIHOMO_SCRIPT" ]; then
            echo "::error::$MIHOMO_SCRIPT not found"
            exit 1
          fi
          python "$MIHOMO_SCRIPT"
          if [ ! -f "mihomo.txt" ]; then
            echo "::error::mihomo.py failed to generate mihomo.txt"
            exit 1
          fi

      - name: Generate Clash Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          CLASH_SCRIPT="data/python/rules_generator/clash.py"
          if [ ! -f "$CLASH_SCRIPT" ]; then
            echo "::error::$CLASH_SCRIPT not found"
            exit 1
          fi
          python "$CLASH_SCRIPT"
          if [ ! -f "clash.txt" ]; then
            echo "::error::clash.py failed to generate clash.txt"
            exit 1
          fi

      - name: Generate Shadowrocket Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          SHADOWROCKET_SCRIPT="data/python/rules_generator/shadowrocket.py"
          if [ ! -f "$SHADOWROCKET_SCRIPT" ]; then
            echo "::error::$SHADOWROCKET_SCRIPT not found"
            exit 1
          fi
          python "$SHADOWROCKET_SCRIPT"
          if [ ! -f "Shadowrocket.conf" ]; then
            echo "::error::shadowrocket.py failed to generate Shadowrocket.conf"
            exit 1
          fi

      - name: Generate Singbox Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          SINGBOX_SCRIPT="data/python/rules_generator/singbox.py"
          if [ ! -f "$SINGBOX_SCRIPT" ]; then
            echo "::error::$SINGBOX_SCRIPT not found"
            exit 1
          fi
          python "$SINGBOX_SCRIPT"
          if [ ! -f "singbox.txt" ]; then
            echo "::error::singbox.py failed to generate singbox.txt"
            exit 1
          fi

      - name: Generate Invizible Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          INVISIBLE_SCRIPT="data/python/rules_generator/invizible.py"
          if [ ! -f "$INVISIBLE_SCRIPT" ]; then
            echo "::error::$INVISIBLE_SCRIPT not found"
            exit 1
          fi
          python "$INVISIBLE_SCRIPT"
          if [ ! -f "invizible.txt" ]; then
            echo "::error::invizible.py failed to generate invizible.txt"
            exit 1
          fi

      - name: Generate Hosts Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          HOSTS_SCRIPT="data/python/rules_generator/hosts.py"
          if [ ! -f "$HOSTS_SCRIPT" ]; then
            echo "::error::$HOSTS_SCRIPT not found"
            exit 1
          fi
          python "$HOSTS_SCRIPT"
          # 增强验证逻辑
          if [ ! -f "hosts.txt" ]; then
            echo "::error::hosts.py failed to generate hosts.txt"
            exit 1
          fi
          # 检查有效内容（排除注释行）
          valid_lines=$(grep -v '^#' hosts.txt | wc -l | awk '{print $1}')
          if [ $valid_lines -lt 10 ]; then
            echo "::error::hosts.txt has invalid content (only $valid_lines valid lines)"
            exit 1
          fi
          echo "hosts.txt total lines: $(wc -l hosts.txt | awk '{print $1}')"
          echo "hosts.txt valid lines: $valid_lines"

      - name: Generate Adclose Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          ADCLOSE_SCRIPT="data/python/rules_generator/adclose.py"
          if [ ! -f "$ADCLOSE_SCRIPT" ]; then
            echo "::error::$ADCLOSE_SCRIPT not found"
            exit 1
          fi
          python "$ADCLOSE_SCRIPT"
          if [ ! -f "adclose.txt" ]; then
            echo "::error::adclose.py failed to generate adclose.txt"
            exit 1
          fi

      # 元数据更新
      - name: Update Title & README
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          TITLE_SCRIPT="data/python/utils/title.py"
          README_SCRIPT="data/python/utils/clean-readme.py"
          
          if [ ! -f "$TITLE_SCRIPT" ]; then
            echo "::error::$TITLE_SCRIPT not found"
            exit 1
          fi
          python "$TITLE_SCRIPT"
          
          if [ ! -f "$README_SCRIPT" ]; then
            echo "::error::$README_SCRIPT not found"
            exit 1
          fi
          python "$README_SCRIPT"
          
          # 验证README更新
          if [ ! -f "README.md" ]; then
            echo "::error::README.md not found after update"
            exit 1
          fi

      # 规则验证（新增步骤）
      - name: Validate Generated Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          VALIDATE_SCRIPT="data/python/utils/validate_rules.py"
          if [ ! -f "$VALIDATE_SCRIPT" ]; then
            echo "::warning::Validation script not found, skipping validation"
            exit 0
          fi
          python "$VALIDATE_SCRIPT"
          # 检查验证报告
          if [ -f "rule_validation_report.txt" ]; then
            cat rule_validation_report.txt
            # 如果存在无效规则则警告（不阻断流程）
            if grep -q "无效规则数量: [1-9]" rule_validation_report.txt; then
              echo "::warning::Invalid rules detected, check report for details"
            fi
          fi

      # 提交与推送
      - name: Commit and Push Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add --all
          git commit -m "Updated at $(TZ=UTC-8 date +'%Y-%m-%d %H:%M:%S')（北京时间）" || { echo "No changes to commit"; exit 0; }
          
          # 增强重试逻辑
          for i in {1..5}; do
            git pull --rebase origin ${{ steps.branch.outputs.branch }} && \
            git push origin ${{ steps.branch.outputs.branch }} && \
            echo "Push successful" && exit 0
            echo "Push attempt $i failed, retrying in $((i * 2))s..."
            sleep $((i * 2))
          done
          echo "::error::Failed to push after 5 attempts"
          exit 1

      # 清理工作流记录
      - name: Cleanup old workflow runs
        if: always()
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3