name: Update Rules
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    paths:
      - 'data/python/**'
      - 'data/source/**'
      - 'data/mod/**'
    
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect default branch
        id: branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "Default branch is $DEFAULT_BRANCH"
          echo "branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT

      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/**
            data/source/**
            data/mod/**
            
      - name: Set up Python
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python -m pip install --upgrade pip
          pip install pytz requests  # 项目中loon.py和title.py依赖pytz
          echo "Python dependencies installed"
            
      - name: Clean previous rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          # 确保临时目录存在并清理
          mkdir -p ./tmp
          rm -f ./tmp/*.txt
          # 清理根目录规则文件（与dl.py保持一致）
          rm -f adblock.txt allow.txt dns.txt qx.list loon-rules.list adb.mrs
          echo "Cleaned previous rules"
          
      - name: Download source rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Starting rule download..."
          python ./data/python/dl.py
          echo "Rule download completed"
        continue-on-error: false
        
      - name: Merge and clean rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Merging rules..."
          python ./data/python/merge.py
          echo "Rules merged and cleaned"
        continue-on-error: false
        
      - name: Generate DNS rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Generating DNS rules..."
          python ./data/python/filter-dns.py
          echo "DNS rules generated"
        continue-on-error: false
        
      - name: Generate AdGuard filtered rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Generating filtered ad rules..."
          python ./data/python/filter-ad.py
          echo "Filtered ad rules generated"
        continue-on-error: false
        
      - name: Generate client-specific rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Generating Quantumult X rules..."
          python ./data/python/qx.py
          
          echo "Generating Loon rules..."
          python ./data/python/loon.py
          
          echo "Generating Mihomo rules..."
          python ./data/python/mihomo.py
          
          echo "Generating Domain List..."
          python ./data/python/domain_list.py
        continue-on-error: false
        
      - name: Update metadata and documentation
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Updating rule headers..."
          python ./data/python/title.py
          
          echo "Updating README..."
          python ./data/python/clean-readme.py
        continue-on-error: false
        
      - name: Configure Git
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Commit changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git add --all
          git commit -m "Updated at $(TZ=UTC-8 date +'%Y-%m-%d %H:%M:%S')（北京时间）" || echo "No changes to commit"
      
      - name: Sync and push changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        env:
          DEFAULT_BRANCH: ${{ steps.branch.outputs.branch }}
        run: |
          for i in 1 2 3; do
            git pull --rebase origin "$DEFAULT_BRANCH"
            git push origin "$DEFAULT_BRANCH" && break || sleep 5
          done

      - name: Cleanup workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
