# .github/workflows/Update-Rules.yml
name: Update Rules
on: 
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */4 * * *'  # 每4小时自动执行
  push:
    paths:
      - 'data/python/utils/**'
      - 'data/python/rules_generator/**'
      - 'data/source/**'
      - 'data/mod/**'
      - 'requirements.txt'

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # 矩阵策略配置（放在job级别）
    strategy:
      matrix:
        include:
          - script: "qx.py"
            output: "QuantumultX.conf"
          - script: "loon.py"
            output: "Loon.conf"
          - script: "mihomo.py"
            output: "Mihomo.yaml"
          - script: "clash.py"
            output: "Clash.yaml"
          - script: "shadowrocket.py"
            output: "Shadowrocket.conf"
          - script: "singbox.py"
            output: "Singbox.json"
          - script: "invizible.py"
            output: "Invizible.txt"
          - script: "hosts.py"
            output: "Hosts.txt"
          - script: "adclose.py"
            output: "Adclose.txt"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Detect default branch
        id: branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Detected default branch: $DEFAULT_BRANCH"

      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/utils/**
            data/python/rules_generator/**
            data/source/**
            data/mod/**
            requirements.txt

      - name: Set up Python
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies with retry
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python -m pip install --upgrade pip
          for i in {1..3}; do
            pip install -r requirements.txt && break || { echo "Retry $i failed"; sleep 5; }
          done
          pip list | grep -E 'requests|pytz' || { echo "Critical dependencies missing"; exit 1; }

      - name: Debug file structure
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Current directory: $(pwd)"
          ls -la data/python/utils/
          ls -la data/python/rules_generator/
          cat requirements.txt || echo "requirements.txt missing"

      # 数据准备阶段
      - name: Download Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          DL_SCRIPT="data/python/utils/dl.py"
          if [ ! -f "$DL_SCRIPT" ]; then
            echo "::error::$DL_SCRIPT not found"
            exit 1
          fi
          python "$DL_SCRIPT"
          if [ -z "$(ls -A tmp/)" ]; then
            echo "::error::No files downloaded to tmp directory"
            exit 1
          fi

      - name: Merge Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          MERGE_SCRIPT="data/python/utils/merge.py"
          if [ ! -f "$MERGE_SCRIPT" ]; then
            echo "::error::$MERGE_SCRIPT not found"
            exit 1
          fi
          python "$MERGE_SCRIPT"
          if [ ! -f "adblock.txt" ] || [ ! -f "allow.txt" ]; then
            echo "::error::merge.py failed to generate adblock.txt or allow.txt"
            exit 1
          fi
          echo "adblock.txt lines: $(wc -l adblock.txt | awk '{print $1}')"
          echo "allow.txt lines: $(wc -l allow.txt | awk '{print $1}')"

      # 规则生成阶段
      - name: Generate DNS Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          DNS_SCRIPT="data/python/rules_generator/filter-dns.py"
          if [ ! -f "$DNS_SCRIPT" ]; then
            echo "::error::$DNS_SCRIPT not found"
            exit 1
          fi
          python "$DNS_SCRIPT"
          if [ ! -f "dns.txt" ]; then
            echo "::error::filter-dns.py failed to generate dns.txt"
            exit 1
          fi
          echo "dns.txt lines: $(wc -l dns.txt | awk '{print $1}')"

      - name: Filter Ad Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          FILTER_AD_SCRIPT="data/python/utils/filter-ad.py"
          if [ ! -f "$FILTER_AD_SCRIPT" ]; then
            echo "::error::$FILTER_AD_SCRIPT not found"
            exit 1
          fi
          python "$FILTER_AD_SCRIPT"
          if [ ! -f "adblock-filtered.txt" ]; then
            echo "::error::filter-ad.py failed to generate adblock-filtered.txt"
            exit 1
          fi

      - name: Generate Domain List
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          DOMAIN_SCRIPT="data/python/rules_generator/domain_list.py"
          if [ ! -f "$DOMAIN_SCRIPT" ]; then
            echo "::error::$DOMAIN_SCRIPT not found"
            exit 1
          fi
          python "$DOMAIN_SCRIPT"

      # 客户端规则生成（使用矩阵策略）
      - name: Generate ${{ matrix.output }} Rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          SCRIPT_PATH="data/python/rules_generator/${{ matrix.script }}"
          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "::error::$SCRIPT_PATH not found"
            exit 1
          fi
          python "$SCRIPT_PATH"
          if [ ! -f "${{ matrix.output }}" ]; then
            echo "::error::Failed to generate ${{ matrix.output }}"
            exit 1
          fi
          echo "${{ matrix.output }} line count: $(wc -l ${{ matrix.output }} | awk '{print $1}')"

      # 元数据更新
      - name: Update Title & README
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          TITLE_SCRIPT="data/python/utils/title.py"
          README_SCRIPT="data/python/utils/clean-readme.py"
          
          if [ ! -f "$TITLE_SCRIPT" ]; then
            echo "::error::$TITLE_SCRIPT not found"
            exit 1
          fi
          python "$TITLE_SCRIPT"
          
          if [ ! -f "$README_SCRIPT" ]; then
            echo "::error::$README_SCRIPT not found"
            exit 1
          fi
          python "$README_SCRIPT"

      # 提交与推送
      - name: Commit and Push Changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add --all
          git commit -m "Updated at $(TZ=UTC-8 date +'%Y-%m-%d %H:%M:%S')（北京时间）" || { echo "No changes to commit"; exit 0; }
          
          # 重试推送逻辑
          for i in {1..5}; do
            git pull --rebase origin ${{ steps.branch.outputs.branch }} && \
            git push origin ${{ steps.branch.outputs.branch }} && \
            echo "Push successful" && exit 0
            echo "Push attempt $i failed, retrying..."
            sleep $((i * 2))
          done
          echo "::error::Failed to push after 5 attempts"
          exit 1

      # 清理工作流记录
      - name: Cleanup old workflow runs
        if: always()
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3