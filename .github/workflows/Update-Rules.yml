name: Update Rules
on: 
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */4 * * *'  # 每4小时自动执行
  push:
    paths:
      - 'data/python/utils/**'
      - 'data/python/rules_generator/**'
      - 'data/source/**'
      - 'data/mod/**'
      - 'requirements.txt'

jobs:
  update-rules:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Detect default branch
        id: branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Detected default branch: $DEFAULT_BRANCH"

      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/utils/**
            data/python/rules_generator/**
            data/source/**
            data/mod/**
            requirements.txt

      # 环境准备阶段
      - name: Set up Python
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies with retry
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python -m pip install --upgrade pip
          # 确保关键依赖安装（包括dns解析库）
          for i in {1..3}; do
            pip install -r requirements.txt && \
            pip install dnspython pytz && break || { echo "Retry $i failed"; sleep 5; }
          done
          # 验证核心依赖
          pip list | grep -E 'requests|pytz|dnspython' || { echo "Critical dependencies missing"; exit 1; }

      - name: Debug environment
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Current directory: $(pwd)"
          ls -la data/python/utils/
          ls -la data/python/rules_generator/
          cat requirements.txt || echo "requirements.txt missing"
          python --version
          pip --version

      # 数据处理阶段
      - name: Download raw rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          DL_SCRIPT="data/python/utils/dl.py"
          if [ ! -f "$DL_SCRIPT" ]; then
            echo "::error::$DL_SCRIPT not found"
            exit 1
          fi
          python "$DL_SCRIPT"
          # 验证下载结果
          if [ -z "$(ls -A tmp/)" ]; then
            echo "::error::No files downloaded to tmp directory"
            exit 1
          fi
          echo "Downloaded files: $(ls tmp/ | wc -l)"

      - name: Merge and clean rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          MERGE_SCRIPT="data/python/utils/merge_files.py"
          if [ ! -f "$MERGE_SCRIPT" ]; then
            echo "::error::$MERGE_SCRIPT not found"
            exit 1
          fi
          python "$MERGE_SCRIPT"
          # 验证合并结果
          for file in adblock.txt allow.txt; do
            if [ ! -f "$file" ]; then
              echo "::error::Merge failed to generate $file"
              exit 1
            fi
            echo "$file line count: $(wc -l $file | awk '{print $1}')"
          done

      - name: Filter invalid domains
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          FILTER_SCRIPT="data/python/utils/filter_invalid_domains.py"
          if [ ! -f "$FILTER_SCRIPT" ]; then
            echo "::error::$FILTER_SCRIPT not found"
            exit 1
          fi
          python "$FILTER_SCRIPT"
          # 验证过滤结果
          for file in tmp/filtered_adblock.txt tmp/filtered_dns.txt; do
            if [ ! -f "$file" ]; then
              echo "::error::Filter failed to generate $file"
              exit 1
            fi
          done

      # 规则生成阶段（使用矩阵策略精简重复代码）
      - name: Generate platform-specific rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        strategy:
          matrix:
            include:
              - script: "filter-dns.py"        # DNS规则
                output: "dns.txt"
              - script: "qx.py"                # Quantumult X
                output: "QuantumultX.conf"
              - script: "loon.py"              # Loon
                output: "Loon.conf"
              - script: "mihomo.py"            # Mihomo
                output: "Mihomo.yaml"
              - script: "clash.py"             # Clash
                output: "Clash.yaml"
              - script: "shadowrocket.py"      # Shadowrocket
                output: "Shadowrocket.conf"
              - script: "singbox.py"           # Singbox
                output: "Singbox.json"
              - script: "invizible.py"         # Invizible
                output: "Invizible.txt"
              - script: "hosts.py"             # Hosts
                output: "Hosts.txt"
              - script: "adclose.py"           # Adclose
                output: "Adclose.txt"
              - script: "domain_list.py"       # 域名列表
                output: "domain_list.txt"
        run: |
          SCRIPT_PATH="data/python/rules_generator/${{ matrix.script }}"
          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "::error::$SCRIPT_PATH not found"
            exit 1
          fi
          python "$SCRIPT_PATH"
          # 验证生成结果
          if [ ! -f "${{ matrix.output }}" ]; then
            echo "::error::Failed to generate ${{ matrix.output }}"
            exit 1
          fi
          echo "${{ matrix.output }} line count: $(wc -l ${{ matrix.output }} | awk '{print $1}')"

      # 元数据更新
      - name: Update metadata (title & README)
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          # 更新标题
          TITLE_SCRIPT="data/python/utils/title.py"
          if [ -f "$TITLE_SCRIPT" ]; then
            python "$TITLE_SCRIPT"
          else
            echo "::warning::$TITLE_SCRIPT not found, skipping"
          fi
          
          # 更新README
          README_SCRIPT="data/python/utils/clean-readme.py"
          if [ -f "$README_SCRIPT" ]; then
            python "$README_SCRIPT"
          else
            echo "::warning::$README_SCRIPT not found, skipping"
          fi

      # 提交变更
      - name: Commit and push changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add --all
          
          # 检查是否有实际变更
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "Auto-update rules: $(date -u +'%Y-%m-%d %H:%M UTC')"
          git push origin ${{ steps.branch.outputs.branch }}
