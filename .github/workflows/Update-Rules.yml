name: Update Rules
on: 
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */6 * * *'  # 每6小时自动执行
  push:
    paths:
      - 'data/python/utils/**'
      - 'data/python/rules_generator/**'
      - 'data/source/**'
      - 'data/mod/**'
      - 'requirements.txt'

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 防止长时间卡壳
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  # 保持凭证用于推送

      - name: Detect default branch
        id: branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Detected default branch: $DEFAULT_BRANCH"

      - name: Check for file changes
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/python/utils/**
            data/python/rules_generator/**
            data/source/**
            data/mod/**
            requirements.txt

      - name: Set up Python
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies with retry
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python -m pip install --upgrade pip
          # 增加重试机制，解决网络波动
          for i in {1..3}; do
            pip install -r requirements.txt && break || { echo "Retry $i failed"; sleep 5; }
          done
          # 验证依赖安装
          pip list | grep -E 'requests|pytz' || { echo "Critical dependencies missing"; exit 1; }

      - name: Debug environment
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          echo "Current directory: $(pwd)"
          echo "Python path: $(which python)"
          echo "Python version: $(python --version)"
          echo "Directory structure:"
          tree -L 3  # 显示目录结构帮助调试
          echo "Check critical scripts exist:"
          [ -f "data/python/utils/dl.py" ] && echo "dl.py exists" || echo "dl.py missing"
          [ -f "data/python/utils/merge.py" ] && echo "merge.py exists" || echo "merge.py missing"

      # 数据准备阶段（带输出验证）
      - name: Download rules with validation
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          DL_SCRIPT="data/python/utils/dl.py"
          if [ ! -f "$DL_SCRIPT" ]; then
            echo "::error::dl.py not found at $DL_SCRIPT"
            exit 1
          fi
          python "$DL_SCRIPT"
          # 验证临时文件生成
          if [ -z "$(ls -A tmp/)" ]; then
            echo "::error::No files downloaded to tmp directory"
            exit 1
          fi
          echo "Downloaded files: $(ls tmp/ | wc -l)"

      - name: Merge rules with validation
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          MERGE_SCRIPT="data/python/utils/merge.py"
          [ -f "$MERGE_SCRIPT" ] || { echo "::error::merge.py missing"; exit 1; }
          python "$MERGE_SCRIPT"
          # 验证合并结果
          [ -f "adblock.txt" ] || { echo "::error::adblock.txt not generated"; exit 1; }
          [ -f "allow.txt" ] || { echo "::error::allow.txt not generated"; exit 1; }
          echo "Merged adblock.txt lines: $(wc -l adblock.txt | awk '{print $1}')"
          echo "Merged allow.txt lines: $(wc -l allow.txt | awk '{print $1}')"

      - name: Filter ad rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          FILTER_SCRIPT="data/python/utils/filter-ad.py"
          [ -f "$FILTER_SCRIPT" ] || { echo "::error::filter-ad.py missing"; exit 1; }
          python "$FILTER_SCRIPT"
          [ -f "adblock-filtered.txt" ] || { echo "::error::adblock-filtered.txt missing"; exit 1; }

      # 规则生成阶段（按依赖顺序执行）
      - name: Generate DNS rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          SCRIPT="data/python/rules_generator/filter-dns.py"
          [ -f "$SCRIPT" ] || { echo "::error::$SCRIPT missing"; exit 1; }
          python "$SCRIPT"
          [ -f "dns.txt" ] || { echo "::error::dns.txt not generated"; exit 1; }

      - name: Generate domain list
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          SCRIPT="data/python/rules_generator/domain_list.py"
          [ -f "$SCRIPT" ] || { echo "::error::$SCRIPT missing"; exit 1; }
          python "$SCRIPT"

      # 客户端规则生成（并行化可能加速，但保持顺序确保稳定性）
      - name: Generate client rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          # 定义要生成的规则脚本列表
          scripts=(
            "qx.py" "loon.py" "mihomo.py" 
            "clash.py" "shadowrocket.py" 
            "singbox.py" "invizible.py" 
            "hosts.py" "adclose.py"
          )
          for script in "${scripts[@]}"; do
            path="data/python/rules_generator/$script"
            if [ ! -f "$path" ]; then
              echo "::warning::$script missing, skipping"
              continue
            fi
            echo "Generating rules with $script..."
            python "$path"
            # 检查输出（根据各脚本输出文件判断）
            output=$(case $script in
              qx.py) echo "qx.list" ;;
              loon.py) echo "loon-rules.list" ;;
              mihomo.py) echo "adb.mrs" ;;
              *) echo "" ;;
            esac)
            if [ -n "$output" ] && [ ! -f "$output" ]; then
              echo "::error::$output not generated by $script"
              exit 1
            fi
          done

      # 元数据更新
      - name: Update title and README
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python "data/python/utils/title.py"
          python "data/python/utils/clean-readme.py"
          [ -f "README.md" ] || { echo "::error::README.md missing"; exit 1; }

      # 提交与推送（增强重试）
      - name: Commit and push changes
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add --all
          git commit -m "Updated at $(TZ=UTC-8 date +'%Y-%m-%d %H:%M:%S')（北京时间）" || { echo "No changes to commit"; exit 0; }
          
          # 增强重试逻辑（最多5次）
          for i in {1..5}; do
            git pull --rebase origin ${{ steps.branch.outputs.branch }} && \
            git push origin ${{ steps.branch.outputs.branch }} && \
            echo "Push successful" && exit 0
            echo "Push attempt $i failed, retrying..."
            sleep $((i * 2))  # 指数退避
          done
          echo "::error::Failed to push after 5 attempts"
          exit 1

      # 清理工作流记录
      - name: Cleanup old workflow runs
        if: always()  # 无论前面步骤是否成功都执行
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1  # 保留1天的记录
          keep_minimum_runs: 3  # 至少保留3条记录
